/**
 * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */

import { mkdir, readFile, rm, writeFile } from 'node:fs/promises'
import { join } from 'node:path'
import { createReuseToml, filterReuseAnnotationsFiles, parseDep5, parseReuseToml } from './utils/reuse.utils.mjs'

import 'zx/globals'

const VERSION = argv._[0] ?? ''
const CONTAINER_NAME = `talk-desktop_nextcloud-server-styles-${VERSION.replaceAll('.', '_')}`
const PORT = 6123
const OUTPUT = `./resources/server-global-styles/${VERSION}`

// Use bash with WSL even on Windows to simplify docker cp usage
useBash()
$.verbose = true
$.quiet = false

// Disable SSL verification to access Nextcloud server in nextcloud-easy-test container
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'

if (!VERSION) {
	await echo('You must provide a version/branch as an argument.')
	process.exit(1)
}

const isNotRunningContainer = async () => (await $`docker inspect -f "{{.State.Running}}" ${CONTAINER_NAME}`.nothrow().quiet()).stdout.trim() !== 'true'

/**
 *
 */
async function isContainerReady() {
	try {
		const response = await fetch(`https://localhost:${PORT}/index.php`)
		return response.ok
	} catch (e) {
		return false
	}
}

const isNotContainerReady = async () => !(await isContainerReady())

/**
 *
 */
async function cleanUpDir() {
	await rm(OUTPUT, { recursive: true, force: true })
}

await spinner('[1/4] Preparing container...', async () => {
	if (await isNotRunningContainer()) {
		// await echo('Starting container...')
		await $`docker run -d -e SERVER_BRANCH=${VERSION} --name ${CONTAINER_NAME} -p ${PORT}:443 ghcr.io/szaimen/nextcloud-easy-test:latest`.run()
	}

	while (await isNotRunningContainer()) {
		await sleep(1000)
	}

	while (await isNotContainerReady()) {
		await sleep(1000)
	}
})

await spinner(`[2/4] Preparing output directory ${OUTPUT}`, async () => {
	await cleanUpDir()
	await mkdir(OUTPUT)
	await mkdir(`${OUTPUT}/core`)
	await mkdir(`${OUTPUT}/core/img`)
	await mkdir(`${OUTPUT}/core/css`)
	await mkdir(`${OUTPUT}/dist`)
	await mkdir(`${OUTPUT}/apps/theming/`, { recursive: true })
	await mkdir(`${OUTPUT}/apps/theming/css`)
	await mkdir(`${OUTPUT}/apps/theming/theme`)
	await mkdir(`${OUTPUT}/apps/theming/img`)
	await mkdir(`${OUTPUT}/.reuse`)
})

await spinner('[3/4] Copying styles...', async () => {
	try {
		await $`docker cp ${CONTAINER_NAME}:/var/www/nextcloud/core/img/ ${OUTPUT}/core/`
		await $`docker cp ${CONTAINER_NAME}:/var/www/nextcloud/core/css/server.css ${OUTPUT}/core/css/`
		await $`docker cp ${CONTAINER_NAME}:/var/www/nextcloud/dist/icons.css ${OUTPUT}/dist/`
		await $`docker cp ${CONTAINER_NAME}:/var/www/nextcloud/apps/theming/img/ ${OUTPUT}/apps/theming/`
		await $`docker cp ${CONTAINER_NAME}:/var/www/nextcloud/apps/theming/REUSE.toml ${OUTPUT}/apps/theming/REUSE.toml`.quiet().nothrow()

		const fixThemePaths = (css) => css.replaceAll('/apps/theming/', '../')
		const fetchCssToFile = (url, output) => fetch(url)
			.then((response) => response.text())
			.then((css) => writeFile(output, fixThemePaths(css)))

		await fetchCssToFile(`https://localhost:${PORT}/apps/theming/css/default.css`, join(OUTPUT, '/apps/theming/css/default.css'))
		await fetchCssToFile(`https://localhost:${PORT}/index.php/apps/theming/theme/light.css?plain=0&v=1`, join(OUTPUT, '/apps/theming/theme/light.css'))
		await fetchCssToFile(`https://localhost:${PORT}/index.php/apps/theming/theme/light.css?plain=1&v=2`, join(OUTPUT, '/apps/theming/theme/light.plain.css'))
		await fetchCssToFile(`https://localhost:${PORT}/index.php/apps/theming/theme/dark.css?plain=0&v=1`, join(OUTPUT, '/apps/theming/theme/dark.css'))
		await fetchCssToFile(`https://localhost:${PORT}/index.php/apps/theming/theme/dark.css?plain=1&v=2`, join(OUTPUT, '/apps/theming/theme/dark.plain.css'))

		let reuse
		const result = await $`docker cp ${CONTAINER_NAME}:/var/www/nextcloud/.reuse/dep5 ${OUTPUT}/.reuse/dep5`.quiet().nothrow()
		if (result.exitCode === 0) {
			const dep5 = await readFile(join(OUTPUT, '/.reuse/dep5'), 'utf-8')
			reuse = parseDep5(dep5)
		} else {
			const result = await $`docker cp ${CONTAINER_NAME}:/var/www/nextcloud/REUSE.toml ${OUTPUT}/REUSE.toml`.quiet().nothrow()
			if (result.exitCode === 0) {
				const reuseToml = await readFile(join(OUTPUT, 'REUSE.toml'), 'utf-8')
				reuse = parseReuseToml(reuseToml)
			} else {
				console.error('Server has no .dep and REUSE.toml or something went wrong...')
			}
		}

		reuse.annotations = filterReuseAnnotationsFiles(reuse.annotations, (file) => file.startsWith('core/img')
			|| ['core/css/server.css', 'dist/icons.css'].includes(file)
			|| file.startsWith('apps/theming/img/'))
		// Generated by a server file. Let's set the same license as default.css
		reuse.annotations.push({
			files: ['apps/theming/theme/light.css', 'apps/theming/theme/dark.css', 'apps/theming/theme/light.plain.css', 'apps/theming/theme/dark.plain.css'],
			copyright: '2022 Nextcloud GmbH and Nextcloud contributors',
			license: 'AGPL-3.0-or-later',
		})
		await writeFile(join(OUTPUT, 'REUSE.toml'), createReuseToml(reuse), 'utf-8')
		await rm(join(OUTPUT, '/.reuse'), { recursive: true })
	} catch (e) {
		await echo('Something went wrong:', e.stderr ?? e)
		await cleanUpDir()
	}
})

await spinner('[4/4] Removing container...', async () => {
	await $`docker rm --force ${CONTAINER_NAME}`
})
